// This file must be imported before loading html5-boilerplate

// Acid-blue:     #1AD4EE
// Acid-green:    #A2EE1A
// Acid-magenta:  #EE1A7D
// Light-grey:    #F6F6F6
// Low-yellow:    #EEDC1A

$body-color: #fff;
//$body-color: #333;
// #F6F6F6;

$base-font-family: unquote('sans-serif');  // default font-family

$base-font-size: 16px;  // default font-size for YUI fonts

$base-line-height: 1.231;  // default line-height for YUI fonts

$font-color: darken($body-color, 60%);
//$font-color: #ccc;

$link-color: #000;
//$link-color: #ddd;
// #1AD4EE;

$link-hover-color: darken($link-color, 10%);

$link-active-color: lighten($link-color, 10%);

$link-visited-color: $link-color;

$selected-font-color: invert( #1AD4EE );  // color for selected text

$selected-background-color: #1AD4EE;  // bg-color for selected text

$list-left-margin: 2em;  // left margin for ul an ol

$sidebars-width: 180px;



$opacity: 0.8;
$cyan: rgba(#0FF, $opacity );
$magenta: rgba(#F0F, $opacity );
$yellow: rgba(#FF0, $opacity );
$black: rgba(#000, $opacity );



$header-height: 50px;
$navigation-width: 230px;
$meta-width: 120px;
$spacing: 8px;









@import "compass/utilities/general/clearfix";
$gutter-width: 10px; // All grids systems have the same gutter width
$float-direction: left;
$left-gutter-width: ceil($gutter-width / 2) !default;
$right-gutter-width: $gutter-width - $left-gutter-width !default;

$base-line-height: 21px;
$show-grid-background: false;

@mixin centered {
  margin: 0 auto;
}

// Float an element and apply gutters.
@mixin floated($side : $float-direction, 
               $left-gutter : $left-gutter-width,
               $right-gutter : $right-gutter-width) {
  float: $side;
  @if $left-gutter > 0 {
    margin-left: $left-gutter;
  }
  @if $right-gutter > 0 {
    margin-right: $right-gutter;
  }
}

// *********** General layout utilities ***********
// https://gist.github.com/1163006#file__grid_system.scss
// The width of a column given the units and unit width of the grid.
@function column-width($n, $col-width, $gutter-width: $gutter-width) {
  @return $col-width * $n + $gutter-width * ($n - 1);
}

// A grid container. Unlike most grid containers,
// this one does not have a width. That is assigned
// on a per-media basis.
@mixin container {
  @include centered; // this is a simple mixin from compass-layouts that sets margin: 0 auto.
  @include pie-clearfix;
}

// The basic structure for a column aligned to a grid.
@mixin column-base {
  @include floated; // make this column floated to the left
  @include pie-clearfix;
}

// Generates the base classes needed for a grid system
@mixin grid-base(
  $base-class: grid-column,
  $first-column-class: g-all-f,
  $last-column-class: g-all-l
) {
  .#{$base-class}         { @include column-base;       }
  .#{$first-column-class} { margin-left: 0 !important;  clear: left; }
  .#{$last-column-class}  { margin-right: 0 !important; }
}

// add $n grid units worth of space to the left of a column
@mixin prepend($n, $col-width) {
  padding-left: column-width($n, $col-width) + $gutter-width;
}

// add $n grid units worth of space to the left of a column
@mixin append($n, $col-width) {
  padding-right: column-width($n, $col-width) + $gutter-width;
}

// The column mixin can be used in two different ways.
// Where base classes are provided they are extended to
// produce less css output. When not provided this
// mixin produces output generally equivalent to the
// blueprint column mixin.
@mixin column(
  $n, $max-unit, $col-width,
  $base-class: false,
  $first-column-class: false,
  $last-column-class: false
) {
  @if $base-class { @extend .#{$base-class}; }
  @else           { @include column-base;    }
  @if $n == $max-unit {
    @if $first-column-class { @extend .#{$first-column-class}; }
    @else                   { margin-left: 0;                  }
    @if $last-column-class  { @extend .#{$last-column-class};  }
    @else                   { margin-right: 0;                 }
    @extend .#{$last-column-class};
  }
  width: column-width($n, $col-width)
}

// Generate grid classes according to a common naming convention
//
// $media is the media prefix. E.g. d (deskotop), t (tablet), h (handheld), or hl (handheld landscape)
// $max-unit is how many columns are in this grid system.
// $col-width is the width of a column
// The column base class and gutter removal class names are derived
// from the prefix, but can be overridden.
@mixin grids($media, $units, $max-unit, $col-width,
             $pad-units: 0 1 2 3 4 5 6 7 8,
             $base-class: "g-#{$media}",
             $first-column-class: "g-#{$media}-f",
             $last-column-class: "g-#{$media}-l"
) {

  // establish the base classes
  @include grid-base($base-class, $first-column-class, $last-column-class);

  // generate padding classes
  @each $n in $pad-units {
    .g-#{$media}-p#{$n} { @include prepend($n, $col-width); }
    .g-#{$media}-a#{$n}  { @include append($n, $col-width);  }
  }

  // generate grid classes
  @each $n in $units {
    .g-#{$media}-#{$n} {
      @include column($n, $max-unit, $col-width,
                      $base-class, $first-column-class, $last-column-class);
    }
  }

}






















